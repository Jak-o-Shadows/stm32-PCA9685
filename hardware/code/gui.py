#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Tue Jul 09 21:28:20 2013

import wx
import serial

import protocol


# begin wxGlade: extracode
# end wxGlade






class ServoWindow(wx.Frame):
    """
    A gui for setting the position of each servo

    """
    def __init__(self, *args, **kwds):
        # begin wxGlade: ServoWindow.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.sliders = []
        
        # Specific to a servo!
        #   These are end of pulse counts
        pulseStart = 30
        minValue = pulseStart + 180
        midValue = pulseStart + 306
        maxValue = pulseStart + 428
        # Then setup the sliders with the range above
        for i in range(16):
            self.sliders.append(wx.Slider(self, -1, midValue, minValue, maxValue, style=wx.SL_VERTICAL|wx.SL_AUTOTICKS|wx.SL_LABELS|wx.SL_LEFT))
            self.Bind(wx.EVT_COMMAND_SCROLL, self.updateServo, self.sliders[-1])
        self.execute_b = wx.Button(self, wx.ID_ANY, "Execute Cached Position")
        self.execute_b.Disable()  # Disable as the checkbox below starts unticked
        self.cachePosition_cb = wx.CheckBox(self, wx.ID_ANY, "Cache Mode")
        #self.slider_0 = wx.Slider(self, -1, 90, 0, 180, style=wx.SL_VERTICAL|wx.SL_AUTOTICKS|wx.SL_LABELS|wx.SL_LEFT)

        self.__set_properties()
        self.__do_layout()
        self.values = [slider.Value for slider in self.sliders]
        
        #from mouseVPython
        self.Bind(wx.EVT_MENU, self.onKeyCombo, id=314)
        accel_tbl = wx.AcceleratorTable([(wx.ACCEL_CTRL,  ord('Q'), 314 )])
        self.SetAcceleratorTable(accel_tbl)
        
        # Callbacks for execute
        self.execute_b.Bind(wx.EVT_BUTTON, self.executeCachedPositions)
        self.cachePosition_cb.Bind(wx.EVT_CHECKBOX, self.cachePositionToggle)
        
        #start the stuff
        self.setupConnStuff()
 
    def onKeyCombo(self, event):
        """"""
        print("You pressed CTRL+Q!")
        
        

        #self.Bind(wx.EVT_COMMAND_SCROLL, self.updateServo, self.slider_0)
        # end wxGlade
        
    def setupConnStuff(self):
    
        port = "COM8"
        baud = 9600

        self.p = protocol.RueP()
        self.p.connect(port, baud)
        self.p.dismissAll()

        #self.th = conn.ThreadHelper(con)
        #self.th.protocol.port = "COM8"
        #self.th.protocol.baud = 9600
        #self.th = conn.ThreadHelper(conn.BluetoothProtocol, conn.message)
        #self.th.protocol.MAC = "00:13:04:07:07:15"
        #self.th.protocol.connect()
        #self.th.startThread()
        

    def __set_properties(self):
        # begin wxGlade: ServoWindow.__set_properties
        self.SetTitle("ServoWindow")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ServoWindow.__do_layout
        outerSizer = wx.BoxSizer(wx.VERTICAL)
        horiSizer = wx.BoxSizer(wx.HORIZONTAL)
        vertiSizer = wx.BoxSizer(wx.VERTICAL)
        vertiSizers = []
        for i in range(len(self.sliders)):
            vertiSizers.append(wx.BoxSizer(wx.VERTICAL))
            vertiSizers[i].Add(self.sliders[i], 0, 0, 0, 0)
            vertiSizers[i].Add(wx.StaticText(self, -1, str(i), (20, 10)))
            horiSizer.Add(vertiSizers[i])
        #vertiSizer.Add(self.slider_0, 0, 0, 0)
        vertiSizer.Add(horiSizer, 1, wx.EXPAND, 0)
        
        #add a connect button, send all button, etc to outerSizer
        outerSizer.Add(vertiSizer)
        outerSizer.Add(self.execute_b)
        outerSizer.Add(self.cachePosition_cb)
        
        self.SetSizer(outerSizer)
        outerSizer.Fit(self)
        self.Layout()
        # end wxGlade

    def updateServo(self, event): # wxGlade: ServoWindow.<event_handler>
    
        def convert(num):
            uint8_t = hex(num)[2:].zfill(2)
            return uint8_t
    
        newValues = [slider.Value for slider in self.sliders]
        for servoIdx, (newPos, oldPos) in enumerate(zip(newValues, self.values)):
            if newPos != oldPos:
                if self.cachePosition_cb.GetValue():
                    # Cache Position
                    self.p.sendCommand(self.p.LISTENONCE, protocol.Uint8_t(servoIdx))
                    self.p.sendCommand(self.p.CACHEPOS, protocol.Uint8_t(newPos))
                    pass
                else:
                    # Send Immediately
                    self.p.sendCommand(self.p.LISTENONCE, protocol.Uint8_t(servoIdx))
                    self.p.sendCommand(self.p.SETPOSITION, protocol.Uint8_t(newPos))

        self.values = newValues
        
        event.Skip()

    def executeCachedPositions(self, event):
        self.p.positionCacheExecute()

    def cachePositionToggle(self, event):
        if self.cachePosition_cb.GetValue():
            self.execute_b.Enable()
        else:
            self.execute_b.Disable()

# end of class ServoWindow


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame = ServoWindow(None, -1, "")
    app.SetTopWindow(frame)
    frame.Show()
    app.MainLoop()
